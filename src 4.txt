const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const mongoose = require('mongoose');
const ngrok = require('ngrok');
const morgan = require('morgan');
const path = require('path');
const db = require('./src/db');
const Order = require('./src/order');
const Account = require('./src/data');
const apiKeys = require('./src/apiKeys');
const appName = 'Main-Api-Endpoint';
const geoip = require('geoip-lite');

const app = express();
const port = 6970; 
const logStream = fs.createWriteStream(path.join(__dirname, 'api.log'), { flags: 'a' });

morgan.token('date', () => new Date().toLocaleString());
morgan.token('client-ip', (req) => req.headers['x-forwarded-for'] || req.connection.remoteAddress);
morgan.token('geo', (req) => {
  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  const geo = geoip.lookup(ip);
  if (geo) {
    return `${geo.city}, ${geo.country}`;
  } else {
    return 'Unknown';
  }
});

app.use(morgan('[:date] ":method :url" :status - IP: :client-ip - Location: :geo', { stream: logStream }));

function authenticateAPIKey(req, res, next) {
  const apiKey = req.header('X-API-Key') || req.query.api_key;

  if (apiKey && apiKeys[apiKey]) {
    req.apiKey = apiKey; 
    req.apiDataFile = apiKeys[apiKey].file;
    next();
  } else {
    const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    const geo = geoip.lookup(ip);
    console.log(`[ApiKeys]: - [Status]: 401 - Unauthorized - IP: ${ip} - Location: ${geo ? `${geo.city}, ${geo.country}` : 'Unknown'}`);
    res.status(401).json({ error: 'Unauthorized' });
  }
}
app.use(bodyParser.json());

app.get('/stock/:type', authenticateAPIKey, async (req, res) => {
  const { tk, mk } = req.query;
  const { type } = req.params;

  if (!tk || !mk) {
    return res.status(400).json({ error: 'Thiếu thông tin tk hoặc mk.' });
  }

  try {
    const orderCode = await generateOrderCode();

    const newOrder = new Order({ tk, mk, orderCode, type, apiKey: req.apiKey });
    await newOrder.save();

    console.log(`[Endpoint]: /stock/${type} - [Status]: 200 - Order Created : ${orderCode} - [API-KEYS]: ${req.apiKey}`);

    res.status(200).json({ orderCode, tk, mk, message: 'Đã lưu thông tin và tạo mã đơn hàng thành công.' });
  } catch (error) {
    console.error('Lỗi khi lưu thông tin và tạo mã đơn hàng:', error);
    res.status(500).json({ error: 'Đã xảy ra lỗi, vui lòng thử lại sau.' });
  }
});

app.get('/account', async (req, res) => {
  const { orderID } = req.query;

  if (!orderID) {
    return res.status(400).json({ error: 'Thiếu thông tin orderID.' });
  }

  try {
    const order = await Order.findOne({ orderCode: orderID });

    if (!order) {
      return res.status(404).json({ error: 'Không tìm thấy đơn hàng.' });
    }

    const newAccount = new Account({ tk: order.tk, mk: order.mk, apiKey: order.apiKey });
    const apiDataFile = apiKeys[order.apiKey].file;
    let data;
    try {
      data = JSON.parse(fs.readFileSync(apiDataFile, 'utf8'));
    } catch (error) {
      data = {};
    }

    data.accounts = data.accounts || [];
    data.accounts.push({ tk: order.tk, mk: order.mk });
    fs.writeFileSync(apiDataFile, JSON.stringify(data));

    await newAccount.save();
    await Order.findOneAndDelete({ orderCode: orderID });

    console.log(`[Endpoint]: /account - [Status]: 200 - Account Claim`);

    res.status(200).json({ tk: order.tk, mk: order.mk, message: 'Nhận tài khoản thành công.' });
  } catch (error) {
    console.error('Lỗi khi lưu thông tin tài khoản:', error);
    res.status(500).json({ error: 'Đã xảy ra lỗi, vui lòng thử lại sau.' });
  }
});

app.get('/clear', authenticateAPIKey, async (req, res) => {
  try {
    const apiDataFile = req.apiDataFile;

    await Order.deleteMany({ apiKey: req.apiKey });
    await Account.deleteMany({ apiKey: req.apiKey });

    fs.writeFileSync(apiDataFile, JSON.stringify({}));

    console.log(`[Endpoint]: /clear - [Status]: 200 - Data Cleared - [API-KEYS]: ${req.apiKey}`);

    res.status(200).json({ message: 'Đã xóa hết dữ liệu trong Order và Account.' });
  } catch (error) {
    console.error('Lỗi khi xóa dữ liệu:', error);
    res.status(500).json({ error: 'Đã xảy ra lỗi, vui lòng thử lại sau.' });
  }
});

let pricingData = {
  spotify: { name: 'Spotify', price: 9.99 },
  netflix: {
      name: 'Netflix',
      prices: {
          '1m': 12.99,
          '3m': 35.99
      }
  },
  discord_nitro: {
      name: 'Discord Nitro',
      prices: {
          '1m': 4.99,
          '3m': 13.99
      }
  },
  robux: {
      name: 'Roblox Robux',
      prices: {
          '1m': 4.99,
          '3m': 13.99
      }
  }
};

// Endpoint lấy dữ liệu giá
app.get('/pricing', (req, res) => {
  res.json(pricingData);
});

// Endpoint cập nhật giá cho một mặt hàng cụ thể
app.put('/pricing/:item', (req, res) => {
  const { item } = req.params;
  const { price } = req.body;

  if (!pricingData[item]) {
      return res.status(404).json({ error: 'Item not found' });
  }

  // Cập nhật giá cho mặt hàng
  if (item === 'netflix' || item === 'discord_nitro' || item === 'robux') {
      const { duration } = req.body;
      if (!pricingData[item].prices[duration]) {
          return res.status(404).json({ error: 'Duration not found' });
      }
      pricingData[item].prices[duration] = price;
  } else {
      pricingData[item].price = price;
  }

  res.json({ message: `Price for ${item} updated successfully` });
});




app.get('/check', authenticateAPIKey, async (req, res) => {
  try {
    const orders = await Order.find({ type: { $in: ['AD', 'BF'] }, apiKey: req.apiKey });

    if (!orders || orders.length === 0) {
      return res.status(404).json({ error: 'Không tìm thấy đơn hàng nào.' });
    }

    let result = {};
    orders.forEach(order => {
      const { type, tk, mk, orderCode } = order;

      if (!result[type]) {
        result[type] = { accounts: [] };
      }

      result[type].accounts.push({ tk, mk, orderCode });
    });

    const apiDataFile = req.apiDataFile;
    let data;
    try {
      data = JSON.parse(fs.readFileSync(apiDataFile, 'utf8'));
    } catch (error) {
      data = {};
    }

    Object.keys(result).forEach(type => {
      data[type] = { accounts: result[type].accounts };
    });

    fs.writeFileSync(apiDataFile, JSON.stringify(data));

    console.log(`[Endpoint]: /check - [Status]: 200 - Orders Checked - [API-KEYS]: ${req.apiKey}`);

    res.status(200).json(result);
  } catch (error) {
    console.error('Lỗi khi lấy thông tin đơn hàng:', error);
    res.status(500).json({ error: 'Đã xảy ra lỗi, vui lòng thử lại sau.' });
  }
});

app.get('/createApiKey/custom', (req, res) => {
  const apiKey = req.query.key;

  if (!apiKey) {
    return res.status(400).json({ error: 'Thiếu thông tin key.' });
  }

  if (apiKeys[apiKey]) {
    return res.status(400).json({ error: 'API key đã tồn tại.' });
  }

  try {
    createApiKey(apiKey, res);

    console.log(`[Endpoint]: /createApiKey/custom - [Status]: 200 - API Key Created`);

  } catch (error) {
    console.error('Lỗi khi tạo API key:', error);
    res.status(500).json({ error: 'Đã xảy ra lỗi, vui lòng thử lại sau.' });
  }
});

function createApiKey(apiKey, res) {
  const apiDataFile = `./src/api/${apiKey}.json`;
  fs.writeFileSync(apiDataFile, JSON.stringify({}));

  apiKeys[apiKey] = { file: apiDataFile };

  fs.writeFileSync('./src/api/apiKeys.json', JSON.stringify(apiKeys, null, 2));

  const apiKeysContent = `const apiKeys = ${JSON.stringify(apiKeys, null, 2)};\n\nmodule.exports = apiKeys;\n`;
  fs.writeFileSync('./src/apiKeys.js', apiKeysContent);

  res.status(200).json({ apiKey });
}

async function generateOrderCode() {
  let orderCode;
  let isUnique = false;

  while (!isUnique) {
    orderCode = generateRandomString(15);
    const existingOrder = await Order.findOne({ orderCode });
    if (!existingOrder) {
      isUnique = true;
    }
  }

  return orderCode;
}

function generateRandomString(length) {
  let result = '';
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  const charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    if (i > 0 && i % 4 === 0) {
      result += '-';
    }
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

function createSeparatorLine() {
  return '======================================';
}   

let ngrokUrl = 'https://f1a3-2402-800-620f-c3e0-569-fe3e-b671-6e13.ngrok-free.app';
const appVersion = '1.0.0';
const startTime = Date.now();

app.get('/stats', async (req, res) => {
  try {
    const orderCount = await Order.countDocuments();
    const accountCount = await Account.countDocuments();
    const uptime = Date.now() - startTime;

    res.status(200).json({
      orderCount,
      accountCount,
      uptime: `${Math.floor(uptime / 1000)} seconds`,
    });

    console.log(`[Endpoint]: /stats - [Status]: 200 - Stats Retrieved`);

  } catch (error) {
    console.error('Lỗi khi lấy thông tin thống kê:', error);
    res.status(500).json({ error: 'Đã xảy ra lỗi, vui lòng thử lại sau.' });
  }
});

app.listen(port, async () => {
  try {
    ngrokUrl = await ngrok.connect({
      addr: port,
      authtoken: '2j0kaADfSzpsMAcgHbwI0GEeqWO_4KUhcjKGX5yowQJEPgza3',
      region: 'us',
    }); 
    console.clear();
    console.log(createSeparatorLine());
    console.log(`    ${appName} v${appVersion} STATUS: RUNNING    `);
    console.log(createSeparatorLine() + '\n');

    console.log('Endpoints:');
    console.log(`Server URL: ${ngrokUrl}`);
    console.log(`- Create Order: ${ngrokUrl}/stock/<type>?tk=<tk>&mk=<mk>`);
    console.log(`- Retrieve Account: ${ngrokUrl}/account?orderID=<orderID>`);
    console.log(`- Clear Data: ${ngrokUrl}/clear`);
    console.log(`- Check Orders: ${ngrokUrl}/check`);
    console.log(`- Create Custom API Key: ${ngrokUrl}/createApiKey/custom?key=<your_custom_key>`);
    console.log(`- Stats: ${ngrokUrl}/stats\n`);
    console.log(createSeparatorLine() + '\n');

    console.log('API Logs:');

  } catch (error) {
    console.error('Lỗi khi kết nối Ngrok:', error);
  }
});
